# GitLab CI/CD Configuration for Security Scanning

# This configuration file sets up various security scans in the GitLab CI/CD pipeline.
# It includes stages for SAST, Secret Detection, Dependency Scanning, and Container Scanning.

# The stages defined for the pipeline
stages:
  - test

# SAST Job
# This job performs Static Application Security Testing to identify security vulnerabilities in the code.
# The job is configured using GitLab's predefined SAST template.
sast:
  stage: test
  variables:
    SAST_EXCLUDED_PATHS: 'tests/*,docs/*'  # Exclude certain paths from being scanned
  include:
    - template: Security/SAST.gitlab-ci.yml

# Secret Detection Job
# This job scans the repository for any hardcoded secrets, such as passwords or API keys, that should not be in the codebase.
# The job uses GitLab's predefined Secret Detection template.
secret_detection:
  stage: test
  include:
    - template: Security/Secret-Detection.gitlab-ci.yml

# Dependency Scanning Job
# This job scans the project dependencies for known vulnerabilities.
# It uses GitLab's predefined Dependency Scanning template to identify issues in the libraries and packages used by the project.
dependency_scanning:
  stage: test
  include:
    - template: Security/Dependency-Scanning.gitlab-ci.yml

# Container Scanning Job
# This job scans container images for known vulnerabilities.
# It is configured using GitLab's predefined Container Scanning template.
container_scanning:
  stage: test
  include:
    - template: Security/Container-Scanning.gitlab-ci.yml

# Documentation:
# 1. **Stages**: Defines the different phases of the CI/CD pipeline. In this script, there is a single 'test' stage where all security scans are performed.
# 2. **SAST Job**:
#    - **Purpose**: To perform static analysis of the source code to identify security vulnerabilities.
#    - **Customization**: Excludes specific paths (`tests/*,docs/*`) from being scanned using the `SAST_EXCLUDED_PATHS` variable.
#    - **Template**: Utilizes the predefined `Security/SAST.gitlab-ci.yml` template from GitLab.
# 3. **Secret Detection Job**:
#    - **Purpose**: To detect hardcoded secrets in the codebase that could pose a security risk.
#    - **Template**: Utilizes the predefined `Security/Secret-Detection.gitlab-ci.yml` template from GitLab.
# 4. **Dependency Scanning Job**:
#    - **Purpose**: To identify known vulnerabilities in the project's dependencies.
#    - **Template**: Utilizes the predefined `Security/Dependency-Scanning.gitlab-ci.yml` template from GitLab.
# 5. **Container Scanning Job**:
#    - **Purpose**: To scan container images for vulnerabilities.
#    - **Template**: Utilizes the predefined `Security/Container-Scanning.gitlab-ci.yml` template from GitLab.

# Notes:
# - The `include` keyword is used to incorporate GitLab's predefined security templates, which contain the necessary configurations for each type of security scan.
# - Environment variables can be set to customize the behavior of the scans. In this example, the `SAST_EXCLUDED_PATHS` variable is used to exclude certain directories from the SAST scan.
# - Further customization can be achieved by setting additional variables or by overriding specific settings in the included templates.

# For more information on customizing the settings, refer to the following GitLab documentation:
# - SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# - Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/pipeline/#customization
# - Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# - Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
